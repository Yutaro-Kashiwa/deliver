{"ts":1378105613777,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package jp.enpit.cloud.tinychat;\r\nimport java.io.IOException;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.CharBuffer;\r\nimport java.util.Set;\r\nimport java.util.concurrent.CopyOnWriteArraySet;\r\nimport java.util.logging.Logger;\r\n\r\nimport javax.servlet.annotation.WebServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.apache.catalina.websocket.MessageInbound;\r\nimport org.apache.catalina.websocket.StreamInbound;\r\nimport org.apache.catalina.websocket.WebSocketServlet;\r\nimport org.apache.catalina.websocket.WsOutbound;\r\n\r\n\r\n@WebServlet(value = { \"/send\" })\r\npublic class MainServlet extends WebSocketServlet {\r\n\r\n\t/**\r\n\t * serialVersionUID\r\n\t */\r\n\tprivate static final long serialVersionUID = 6946416208261279049L;\r\n\r\n\t/**\r\n\t * スレッドセーフなEchoInboundのSet\r\n\t */\r\n\tprivate static final Set<ChatMessageInbound> inbounds = new CopyOnWriteArraySet<ChatMessageInbound>();\r\n\r\n\tprivate static Logger logger;\r\n\r\n\tpublic MainServlet() {\r\n\t\tlogger = Logger.getLogger(getClass().getName());\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 新規クライアント接続時の処理\r\n\t */\r\n\t@Override\r\n\tprotected StreamInbound createWebSocketInbound(String subProtocol, HttpServletRequest request) {\r\n\t\treturn new ChatMessageInbound(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * 送受信をお行うためのオブジェクト\r\n\t */\r\n\tclass ChatMessageInbound extends MessageInbound {\r\n\t\tprivate WebSocketServlet mainServlet;\r\n\r\n\t\tpublic ChatMessageInbound(MainServlet mainServlet) {\r\n\t\t\tthis.mainServlet = mainServlet;\r\n\t\t\tlog(\"connect\", \"\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 接続時の処理\r\n\t\t */\r\n\t\t@Override\r\n\t\tprotected void onOpen(WsOutbound outbound) {\r\n\t\t\tlog(\"open\", outbound.toString());\r\n\r\n\t\t\t// EchoServletの持つsocketリストに自分自身を保存する\r\n\t\t\tinbounds.add(this);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 切断時の処理\r\n\t\t */\r\n\t\t@Override\r\n\t\tprotected void onClose(int status) {\r\n\t\t\tlog(\"close\", String.valueOf(status));\r\n\t\t\tinbounds.remove(this);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * バイナリメッセージ受信時の処理\r\n\t\t */\r\n\t\t@Override\r\n\t\tprotected void onBinaryMessage(ByteBuffer message) throws IOException {\r\n\t\t\t// 何もしない\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * テキストメッセージ受信時の処理\r\n\t\t */\r\n\t\t@Override\r\n\t\tprotected void onTextMessage(CharBuffer buffer) throws IOException {\r\n\t\t\tlog(\"send\", buffer.toString());\r\n\t\t\tsendMessages(buffer);\r\n\t\t}\r\n\r\n\t\tprivate void log(String type, String message) {\r\n\t\t\tlogger.info(\"[\" + type + \"] (\" + mainServlet.getServletContext().getContextPath() + \") \" + message);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 全クライアントにメッセージを送信する\r\n\t\t * @param msgObject\r\n\t\t * @throws IOException\r\n\t\t */\r\n\t\tprivate void sendMessages(CharBuffer buffer) throws IOException{\r\n\t\t\ttry {\r\n\t\t\t\tfor (MessageInbound socket : inbounds) {\r\n\t\t\t\t\tsocket.getWsOutbound().writeTextMessage(buffer);\r\n\t\t\t\t\tbuffer.position(0);\r\n\t\t\t\t}\r\n\t\t\t} catch(IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":2669}]],"length":2669}
